<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Angular2 知识梳理</title>
  
  <link href="//angular.github.io/atom.xml" rel="self"/>
  
  <link href="https://github.com/tuluffy/"/>
  <updated>2017-07-20T02:32:01.000Z</updated>
  <id>https://github.com/tuluffy/</id>
  
  <author>
    <name>tuluffy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Angular 2（二）： 子路由和路由守卫</title>
    <link href="https://github.com/tuluffy/2017/07/20/childRouter/"/>
    <id>https://github.com/tuluffy/2017/07/20/childRouter/</id>
    <published>2017-07-20T02:32:01.000Z</published>
    <updated>2017-07-20T02:32:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="子路由"><a href="#子路由" class="headerlink" title="子路由"></a>子路由</h2><p>  子路由相对于根路由的概念而来，示例：children：数组，配置路由相关信息</p>
<p>  路由配置：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    path:&apos;product&apos;,</div><div class="line">    component:ProductComponent,</div><div class="line">    children:[  //关键字</div><div class="line">        &#123;</div><div class="line">            path:&apos;&apos;,</div><div class="line">            component:ProductDescComponent  //商品简介组件</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            path:&apos;seller/:id&apos;,</div><div class="line">            component:SellerDetailComponent     //具体商品信息组件</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  父组件：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">注意[routerLink] = &quot;[&apos;./&apos;]&quot;，路径中加&quot;.&quot;指明是匹配子路由</div><div class="line">  &lt;a [routerLink] = &quot;[&apos;./&apos;]&quot;&gt;商品简介&lt;/a&gt;</div><div class="line">  &lt;a [routerLink] = &quot;[&apos;./seller/3&apos;]&quot;&gt;商品信息&lt;/a&gt;</div><div class="line">  &lt;router-outlet&gt;&lt;/router-outlet&gt;     //供子组件使用的路由插座</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="辅助路由"><a href="#辅助路由" class="headerlink" title="辅助路由"></a>辅助路由</h2><p> 概览：辅助路由可以有多个，根据“name”字段来匹配</p>
<ul>
<li>路由配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    path:&apos;xxx&apos;,</div><div class="line">    component:XComponent,</div><div class="line">    outlet:&quot;aux&quot;,   //匹配路由名字,确定放在哪个辅助路由上</div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line">    path:&apos;yyy&apos;,</div><div class="line">    component:YComponent,</div><div class="line">    outlet:&quot;aux&quot;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>父组件写法，假设是在app.component.html中<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;a [routerLink]=&quot;[&apos;/home&apos;,&#123; outlets:&#123; aux:&quot;xxx&quot; &#125; &#125;]&quot;&gt;GOTO XXX&lt;/a&gt;</div><div class="line">&lt;a [routerLink]=&quot;[&apos;/home&apos;,&#123; outlets:&#123; aux:&quot;yyy&quot; &#125; &#125;]&quot;&gt;GOTO YYY&lt;/a&gt;</div><div class="line"></div><div class="line">&lt;router-outlet&gt;&lt;/router-outlet&gt;     //主路由</div><div class="line">&lt;router-outlet name=&quot;aux&quot;&gt;&lt;/router-outlet&gt;      //辅助路由</div><div class="line">&lt;router-outlet name=&quot;other&quot;&gt;&lt;/router-outlet&gt;      //可以有多个辅助路由</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h2><h3 id="路由守卫的意义在于，路由事件发生后，是否允许默认操作（比如，跳转到指定的页面）"><a href="#路由守卫的意义在于，路由事件发生后，是否允许默认操作（比如，跳转到指定的页面）" class="headerlink" title="路由守卫的意义在于，路由事件发生后，是否允许默认操作（比如，跳转到指定的页面）"></a>路由守卫的意义在于，路由事件发生后，是否允许默认操作（比如，跳转到指定的页面）</h3><p>如何使用？示例：</p>
<ul>
<li><p>路由文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">import LoginGuard from &quot;...&quot;;</div><div class="line">import TokenGuard from &quot;...&quot;;</div><div class="line"></div><div class="line">const routes : Routes = [</div><div class="line">    &#123;</div><div class="line">        path:&apos;product&apos;,</div><div class="line">        component:ProductComponent,</div><div class="line">        //路由钩子对象（对应loginGuard.ts中的钩子接口）</div><div class="line">        canActivate:[   //是否可以进入该组件</div><div class="line">            LoginGuard  //控制函数（路由钩子函数），只有当所有的函数都返回true时，才可以进入组件</div><div class="line">            TokenGuard</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">];</div><div class="line"></div><div class="line">@NgModule(&#123;</div><div class="line">    import:[RouterModule.forRoot(routes)],</div><div class="line">    exports:[RouterModule],</div><div class="line">    providers:[ LoginGuard,TokenGuard ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>守卫文件：loginGuard.ts</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">export class LoginGuard implements CanActivate&#123;</div><div class="line">    CanActivate():boolean&#123;  //接收一个boolean类型的返回值</div><div class="line">        //处理逻辑，比如判断token是否有效</div><div class="line">        //return true;  </div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>增加一个CanDeactivate守卫，表示是否可以离开该组件(常用来检查用户填写的信息是否已经保存):</p>
<p>   实现守卫（实现CanDeactivate守卫接口）接口，unSaveGuard.ts文件中<br>    注意事项：</p>
<ul>
<li>该守卫需要接受一个组件作为参数（即保护的组件）；</li>
<li>在守卫函数中，需要创建组件的对象（comp），通过该对象获得组件内部的属性判断是否已经保存</li>
</ul>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">import &#123; CanDeactivate &#125; from &apos;...&apos;;</div><div class="line"></div><div class="line">export class UnSaveGuard implements CanDeactivate&lt;ProductComponent&gt;&#123;</div><div class="line">   canDeactivate(comp:ProductComponent)&#123;</div><div class="line">       //逻辑操作，对组件内部的变量进行验证是否已经保存</div><div class="line">       comp.varibleName;    </div><div class="line">       </div><div class="line">       //return true;  //是否允许离开</div><div class="line">       return false;</div><div class="line"></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>将守卫加入到路由配置中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    path: &apos;product&apos;,</div><div class="line">    component: ProductComponent,</div><div class="line">    canActivate:[ LoginGuard,TokenGuard ],</div><div class="line">    canDeactivate:[ UnSaveGuard ] //只有一系列函数都return true才可以顺利执行路由操作</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在NgModule中配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">providers: [ loginGuard,TokenGuard,UnSaveGuard ]</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="resolve守卫"><a href="#resolve守卫" class="headerlink" title="resolve守卫"></a>resolve守卫</h2><p>该守卫常用在进入下一个组件之前，执行服务获取下一个组件需要用到的数据，并带入组件中。<br>所以该组件需要可以被注入，在写时需要加入@Injectable()标识</p>
<ul>
<li><p>路由配置项改写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    path:&apos;product&apos;,</div><div class="line">    component:ProductComponent,</div><div class="line">    resolve:&#123;</div><div class="line">        prod: ProductResolve //prod是传入组件中的参数集合的对象</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>写productResolve.ts文件，提供ProductResolve函数</p>
</li>
<li><p>该class需要指定返回的参数的格式，即：<product></product></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">export class ProductResolve implements Resolve&lt;Product&gt;&#123;</div><div class="line">    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable&lt;Product&gt;|Promise&lt;Product&gt;|Product &#123;</div><div class="line">        //发起请求，获取数据</div><div class="line">        return data;    //将解析好的数据传递到组件内部,之后订阅该字段获取数据</div><div class="line">      &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在组建中取值（采用订阅的方式）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">constructor(private routeInfo:ActivatedRoute)&#123;&#125;</div><div class="line"></div><div class="line">ngOnInit()&#123;</div><div class="line">    this.routeInfo.data.subscribe((data:&#123;prod:Product&#125;) =&gt; &#123;</div><div class="line">        this.id = data.prod.id;     </div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###本章内容主要通过代码展示，比较粗略。如果发现文档中的错漏，或者涉及到具体问题，可以联系QQ:3265564490,备注：Angular 笔记</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;子路由&quot;&gt;&lt;a href=&quot;#子路由&quot; class=&quot;headerlink&quot; title=&quot;子路由&quot;&gt;&lt;/a&gt;子路由&lt;/h2&gt;&lt;p&gt;  子路由相对于根路由的概念而来，示例：children：数组，配置路由相关信息&lt;/p&gt;
&lt;p&gt;  路由配置：&lt;br&gt;  &lt;figu
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Angular 2（二）： 路由</title>
    <link href="https://github.com/tuluffy/2017/07/11/router/"/>
    <id>https://github.com/tuluffy/2017/07/11/router/</id>
    <published>2017-07-11T10:30:07.000Z</published>
    <updated>2017-07-11T10:30:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h4 id="router是Angular-内置模块，可以使用cli-提供的指令来创建包含route-组件的项目"><a href="#router是Angular-内置模块，可以使用cli-提供的指令来创建包含route-组件的项目" class="headerlink" title="router是Angular 内置模块，可以使用cli 提供的指令来创建包含route 组件的项目"></a>router是Angular 内置模块，可以使用cli 提供的指令来创建包含route 组件的项目</h4>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ng new router --routing</div></pre></td></tr></table></figure>
<p> 此时，在app.module.ts 文件中可以看到已经被自动引入到 imports组中。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">imports: [</div><div class="line">    BrowserModule,</div><div class="line">    AppRoutingModule</div><div class="line">  ],</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="路由组件相关字段含义"><a href="#路由组件相关字段含义" class="headerlink" title="路由组件相关字段含义"></a>路由组件相关字段含义</h2><h3 id="1-Routes，路由的配置项"><a href="#1-Routes，路由的配置项" class="headerlink" title="1. Routes，路由的配置项"></a>1. Routes，路由的配置项</h3><ul>
<li>保存路由信息，即：url和component的对应关系</li>
<li>指定组件展示在哪个路有插座上(&lt;RouterOutLet&gt;&lt;/RouterOutLet&gt;)</li>
</ul>
<h3 id="2-RouterOutLet，路由插座，即：激活的组件显示在Html-代码片段中的位置"><a href="#2-RouterOutLet，路由插座，即：激活的组件显示在Html-代码片段中的位置" class="headerlink" title="2. RouterOutLet，路由插座，即：激活的组件显示在Html 代码片段中的位置"></a>2. RouterOutLet，路由插座，即：激活的组件显示在Html 代码片段中的位置</h3><h3 id="3-Router，路由对象，提供在控制器中使用的一系列方法"><a href="#3-Router，路由对象，提供在控制器中使用的一系列方法" class="headerlink" title="3. Router，路由对象，提供在控制器中使用的一系列方法"></a>3. Router，路由对象，提供在控制器中使用的一系列方法</h3><ul>
<li>navigate()</li>
<li>navigateByUrl()</li>
</ul>
<h3 id="4-RouterLink，在Html-中使用的导航指令"><a href="#4-RouterLink，在Html-中使用的导航指令" class="headerlink" title="4. RouterLink，在Html 中使用的导航指令"></a>4. RouterLink，在Html 中使用的导航指令</h3><h3 id="5-ActivatedRoute，当前激活的组件的路由对象"><a href="#5-ActivatedRoute，当前激活的组件的路由对象" class="headerlink" title="5. ActivatedRoute，当前激活的组件的路由对象"></a>5. ActivatedRoute，当前激活的组件的路由对象</h3><ul>
<li>路由地址</li>
<li>路由参数</li>
</ul>
<hr>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="1-配置项中，path-对象的值不能使用”-“-开头，这样可以使在项目中自由使用绝对路径和相对路径"><a href="#1-配置项中，path-对象的值不能使用”-“-开头，这样可以使在项目中自由使用绝对路径和相对路径" class="headerlink" title="1. 配置项中，path 对象的值不能使用”/“ 开头，这样可以使在项目中自由使用绝对路径和相对路径"></a>1. 配置项中，path 对象的值不能使用”/“ 开头，这样可以使在项目中自由使用绝对路径和相对路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const router:Router = [</div><div class="line">    &#123;</div><div class="line">        path:&quot;product&quot;,    //path:&quot;/product&quot;,错误写法</div><div class="line">        component:ProductComponet</div><div class="line">    &#125;</div><div class="line">];</div></pre></td></tr></table></figure>
<hr>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="1-RouterLink"><a href="#1-RouterLink" class="headerlink" title="1. RouterLink"></a>1. RouterLink</h3>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a [RouterLink]=&quot;[&apos;/product&apos;]&quot;&gt;GOTO&lt;/a&gt;</div></pre></td></tr></table></figure>
<ul>
<li>路由地址以’/‘ 开头，表示查找的是根目录组件</li>
<li>值的形式是数组，由路由地址和参数组成：[‘url’,参数]</li>
</ul>
<p>该写法等价于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a (click)=&quot;GOTO()&quot;&gt;GOTO&lt;/a&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Controller:</div><div class="line">constructor(private router:Router)&#123;&#125;</div><div class="line">    </div><div class="line">GOTO():void&#123;</div><div class="line">    this.router.navigate([&apos;/product&apos;])</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-基础写法"><a href="#2-基础写法" class="headerlink" title="2. 基础写法"></a>2. 基础写法</h3><ul>
<li>路由匹配是采取优先原则，通配符配置放在最后面，当路径错误是展现指定的页面<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const router : Router =[</div><div class="line">    &#123; path:&quot;&quot;,component:HomeComponent &#125;</div><div class="line">    &#123; path:&quot;product&quot;,component:Product &#125;</div><div class="line">    &#123; path:&quot;**&quot;,component:404Component &#125;    //通配符配置</div><div class="line">]</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-参数的传递和接收"><a href="#3-参数的传递和接收" class="headerlink" title="3. 参数的传递和接收"></a>3. 参数的传递和接收</h3><p>路由参数传递的方式有三种，分别是：</p>
<p>   ① 在查询参数中传递<br>   ② 在路径中传递<br>   ③ 在配置项中使用特定对象data传递</p>
<ul>
<li><p><strong>在查询参数中传递</strong><br>传递方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a [routerLink]=&quot;[&apos;/product&apos;]&quot; [queryParams]=&quot;&#123;id:1&#125;&quot;&gt;GOTO&lt;/a&gt;</div></pre></td></tr></table></figure>
<p>接收方式:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">constructor(private routeInfo : ActivatedRoute)&#123;&#125;</div><div class="line"></div><div class="line">private id : number;</div><div class="line"></div><div class="line">ngOnInit()&#123;</div><div class="line">    this.id = this.routeInfo.snapshot.queryParams[&quot;id&quot;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>在路径中设置参数</strong><br>修改router中的配置:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; path:&quot;product/:id&quot;, component:ProductComponent &#125;</div></pre></td></tr></table></figure>
<p>修改Html中的RouterLink的写法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a [routerLink] = &quot;[&apos;/product&apos;, 1]&quot;&gt;GOTO&lt;/a&gt;</div></pre></td></tr></table></figure>
<p>Controller:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">this.id = this.routeInfo.snapshot.params[&quot;id&quot;];</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><strong>在路由的配置项中使用data对象</strong><br>修改路由配置项：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">     path:&quot;product&quot;,</div><div class="line">     component:ProductComponent,</div><div class="line">     data:[</div><div class="line">         &#123;id:1&#125;,</div><div class="line">         &#123;name:2&#125;,</div><div class="line">     ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>   获取传进来的参数：<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">constructor(private routeInfo: ActivatedRoute )&#123;&#125;</div><div class="line"></div><div class="line">ngOnInit()&#123;</div><div class="line">    this.id = this.routeInfo.data[0][&quot;id&quot;];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="参数快照和参数订阅"><a href="#参数快照和参数订阅" class="headerlink" title="参数快照和参数订阅"></a>参数快照和参数订阅</h2><p>通过路由激活某一个组件之后，获取参数的方式有两种</p>
<ul>
<li><p>参数快照，关键字：snapshot</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ngOnInit()&#123;</div><div class="line">     this.id = this.routeInfo.snapshot.params[&quot;id&quot;];</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>参数订阅，关键字：subscribe</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ngOnInit()&#123;</div><div class="line">     this.routeInfo.params.subscribe((params : Params) =&gt; &#123;</div><div class="line">        this.id = params[&quot;id&quot;];</div><div class="line">     &#125;)</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>参数订阅与参数快照的使用场景：</strong><br><em>当由HomeComponent进入到ProductComponent时，ProductComponent被激活，ngOnInit和constructor调用一次。<br>  例如：Product组件内部产品间的切换，由于id是通过参数在ngOnInit中获取的：<br>  ①如果使用snapshot的方式，组件未被销毁，noOnInit不再执行，那么显示在外部的id值将不再更新，出现数据错误；<br>  ②处理方式，采用subscribe的方式，当参数发生变化，即可更新信息；
  </em></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;h4 id=&quot;router是Angular-内置模块，可以使用cli-提供的指令来创建包含route-组件的项目&quot;&gt;&lt;a href=&quot;#rout
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Angular 2（一）： 概览</title>
    <link href="https://github.com/tuluffy/2017/07/10/synopsis/"/>
    <id>https://github.com/tuluffy/2017/07/10/synopsis/</id>
    <published>2017-07-10T10:27:50.000Z</published>
    <updated>2017-07-10T10:27:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h2><h4 id="1-全新的命令行工具-angular-cli"><a href="#1-全新的命令行工具-angular-cli" class="headerlink" title="1. 全新的命令行工具 angular-cli"></a>1. 全新的命令行工具 <a href="https://www.npmjs.com/package/angular-cli" target="_blank" rel="external">angular-cli</a></h4><h4 id="2-服务端渲染"><a href="#2-服务端渲染" class="headerlink" title="2. 服务端渲染"></a>2. 服务端渲染</h4><ul>
<li>缩短页面从启动到完整展现的时间</li>
<li>解决seo问题</li>
</ul>
<h4 id="3-提供了标准的UI库（Material-Design），使桌面和移动程序兼容"><a href="#3-提供了标准的UI库（Material-Design），使桌面和移动程序兼容" class="headerlink" title="3. 提供了标准的UI库（Material Design），使桌面和移动程序兼容"></a>3. 提供了标准的UI库（Material Design），使桌面和移动程序兼容</h4><h4 id="4-核心：组件、服务、指令-gt-功能-模块-gt-打包"><a href="#4-核心：组件、服务、指令-gt-功能-模块-gt-打包" class="headerlink" title="4. 核心：组件、服务、指令 =&gt;功能,   模块=&gt;打包"></a>4. 核心：组件、服务、指令 =&gt;功能,   模块=&gt;打包</h4><hr>
<h2 id="工程目录关键文件介绍"><a href="#工程目录关键文件介绍" class="headerlink" title="工程目录关键文件介绍"></a>工程目录关键文件介绍</h2><h3 id="1-angular-cli-json"><a href="#1-angular-cli-json" class="headerlink" title="1. .angular-cli.json"></a>1. .angular-cli.json</h3><p>angular 命令行工具配置文件，Angular应用程序启动的入口，引入第三方库需要在此处配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&quot;apps&quot;: [</div><div class="line">    &#123;</div><div class="line">      &quot;root&quot;: &quot;src&quot;,</div><div class="line">      //配置外部css文件</div><div class="line">      &quot;styles&quot;: [</div><div class="line">        &quot;styles.css&quot;,</div><div class="line">        &quot;../node_modules/bootstrap/dist/css/bootstrap.css&quot;</div><div class="line">      ],</div><div class="line">      //配置外部js文件</div><div class="line">      &quot;scripts&quot;: [</div><div class="line">        &quot;../node_modules/jquery/dist/jquery.js&quot;,    //配置JQ,注意路径问题，以root为基地址</div><div class="line">        &quot;../node_modules/bootstrap/dist/js/bootstrap.js&quot;   </div><div class="line">      ],</div><div class="line">    &#125;</div><div class="line">  ],</div></pre></td></tr></table></figure>
<hr>
<h2 id="工程模块介绍"><a href="#工程模块介绍" class="headerlink" title="工程模块介绍"></a>工程模块介绍</h2><h3 id="1-Component，-装饰器"><a href="#1-Component，-装饰器" class="headerlink" title="1. @Component， 装饰器"></a>1. @Component， 装饰器</h3><ul>
<li>用来告知框架如何处理一个ts类</li>
<li>Component中所有属性的值称为元数据</li>
<li>Angular根据元数据渲染组件，并实现控制器的逻辑</li>
</ul>
<h3 id="2-Template，模板，可以简单地理解为可使用Angular数据绑定机制的html片段"><a href="#2-Template，模板，可以简单地理解为可使用Angular数据绑定机制的html片段" class="headerlink" title="2. Template，模板，可以简单地理解为可使用Angular数据绑定机制的html片段"></a>2. Template，模板，可以简单地理解为可使用Angular数据绑定机制的html片段</h3><h3 id="3-Controller，控制器"><a href="#3-Controller，控制器" class="headerlink" title="3.Controller，控制器"></a>3.Controller，控制器</h3><ul>
<li>被@Component装饰器用来装饰</li>
<li>通过数据绑定和模板通信</li>
</ul>
<hr>
<h2 id="模块（NgModel）相关介绍"><a href="#模块（NgModel）相关介绍" class="headerlink" title="模块（NgModel）相关介绍"></a>模块（NgModel）相关介绍</h2><h3 id="1-declarations，我们定义的组件、指令、管道需要放在此处声明"><a href="#1-declarations，我们定义的组件、指令、管道需要放在此处声明" class="headerlink" title="1. declarations，我们定义的组件、指令、管道需要放在此处声明"></a>1. declarations，我们定义的组件、指令、管道需要放在此处声明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">declarations: [</div><div class="line">    AppComponent,</div><div class="line">    ProductComponent,</div><div class="line">],</div></pre></td></tr></table></figure>
<h3 id="2-imports，声明应用正常运转需要的模块，也即：AppModule所依赖的模块"><a href="#2-imports，声明应用正常运转需要的模块，也即：AppModule所依赖的模块" class="headerlink" title="2. imports，声明应用正常运转需要的模块，也即：AppModule所依赖的模块"></a>2. imports，声明应用正常运转需要的模块，也即：AppModule所依赖的模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">imports: [</div><div class="line">    BrowserModule,</div><div class="line">    HttpModule,</div><div class="line">    FormsModule,</div><div class="line">],</div></pre></td></tr></table></figure>
<h3 id="3-provides，相关服务放在此种声明"><a href="#3-provides，相关服务放在此种声明" class="headerlink" title="3. provides，相关服务放在此种声明"></a>3. provides，相关服务放在此种声明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">providers: [</div><div class="line">    HttpService，    //服务类名称</div><div class="line">],</div></pre></td></tr></table></figure>
<h3 id="4-bootstrap，声明启动组件"><a href="#4-bootstrap，声明启动组件" class="headerlink" title="4. bootstrap，声明启动组件"></a>4. bootstrap，声明启动组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">bootstrap: [</div><div class="line">    AppComponent，</div><div class="line">]</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;新特性&quot;&gt;&lt;a href=&quot;#新特性&quot; class=&quot;headerlink&quot; title=&quot;新特性&quot;&gt;&lt;/a&gt;新特性&lt;/h2&gt;&lt;h4 id=&quot;1-全新的命令行工具-angular-cli&quot;&gt;&lt;a href=&quot;#1-全新的命令行工具-angular-cli&quot; cla
    
    </summary>
    
    
  </entry>
  
</feed>
