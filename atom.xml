<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Angular2 知识梳理</title>
  
  <link href="//angular.github.io/atom.xml" rel="self"/>
  
  <link href="https://github.com/tuluffy/"/>
  <updated>2017-07-25T08:04:37.000Z</updated>
  <id>https://github.com/tuluffy/</id>
  
  <author>
    <name>tuluffy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Angular 2（七）： 生命周期钩子</title>
    <link href="https://github.com/tuluffy/2017/07/25/lifecycle/"/>
    <id>https://github.com/tuluffy/2017/07/25/lifecycle/</id>
    <published>2017-07-25T08:04:37.000Z</published>
    <updated>2017-07-25T08:04:37.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="钩子的调用顺序："><a href="#钩子的调用顺序：" class="headerlink" title="钩子的调用顺序："></a>钩子的调用顺序：</h3><p>consttructor -&gt; ngOnChanges -&gt;  ngOnInit    -&gt;  ngDoCheck   -&gt;</p>
<p>ngAfterContentInit  -&gt;  ngAfterContentChecked   -&gt;  ngAfterViewInit -&gt;</p>
<p>ngAfterViewChecked  -&gt;  ngOnDestroy</p>
<h4 id="ngOnchanges"><a href="#ngOnchanges" class="headerlink" title="ngOnchanges"></a>ngOnchanges</h4><ul>
<li>当父组件初始化或者修改子组件的输入属性时调用；</li>
<li>如果一个组件没有输入属性，那么永远不会调用该钩子；</li>
<li>首次调用一定在ngOnInit之前；</li>
<li>可以被多次调用；<h5 id="可变对象和不可变对象"><a href="#可变对象和不可变对象" class="headerlink" title="可变对象和不可变对象"></a><strong>可变对象和不可变对象</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let val = &apos;hello&apos;;</div><div class="line">val = &apos;hello world&apos;;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>‘hello’在内存中被创建后赋值给val；</li>
<li>‘hello world’在内存中被创建后赋值给val;</li>
</ul>
<p>无论val如何变化，’hello’在内存中的地址始终保持不变。字符串是不可变对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let user = &#123; name:&apos;roy&apos; &#125;;</div><div class="line">user.name = &apos;joy&apos;;</div></pre></td></tr></table></figure>
<ul>
<li>在内存中创建了user，name属性指向’roy’所在的地址；</li>
<li>在内存中创建了’joy’，地址赋值给了user的属性name；</li>
<li>name发生了变化，但是user的地址始终不变；也就是说由于属性的改变，user（对象）是可变对象；</li>
</ul>
<h4 id="ngOnChanges触发机制"><a href="#ngOnChanges触发机制" class="headerlink" title="ngOnChanges触发机制"></a>ngOnChanges触发机制</h4><h5 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;我是父组件&lt;/div&gt;</div><div class="line">&lt;div&gt;</div><div class="line">    &lt;span&gt;问候语&lt;/span&gt;</div><div class="line">    &lt;input type=&quot;text&quot; [(ngModel)]=&apos;hello&apos;/&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div&gt;</div><div class="line">    &lt;span&gt;名字&lt;/span&gt;</div><div class="line">    &lt;input type=&quot;text&quot; [(ngModel)]=&apos;user.name&apos;&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;app-child [childHello]=&apos;hello&apos; [childUser]=&apos;user&apos;&gt;&lt;/app-child&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hello:string;</div><div class="line">user:&#123;name:string&#125; = &#123; name: &apos;&apos; &#125;;</div></pre></td></tr></table></figure>
<h5 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;&#123;&#123;childHello&#125;&#125;&lt;/div&gt;</div><div class="line">&lt;div&gt;&#123;&#123;childUser.name&#125;&#125;&lt;/div&gt;</div><div class="line">&lt;input type=&quot;text&quot; [(ngModel)]=&quot;message&quot;/&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Input() childHello:string;</div><div class="line">@input() childUser:&#123;name:string&#125;;</div><div class="line"></div><div class="line">message:string;</div><div class="line"></div><div class="line">① ngOnChanges(changes:SimpleChanges):void&#123;</div><div class="line">    console.log(changes);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上代码结果表现为：</p>
<ul>
<li>当输入问候语hello时，①被触发。原因：由于字符串是不可变对象，然后输入后却发生了变化，故调用ngOnChanges；</li>
<li>修改名字name时，①不触发。原因：由于修改的是可变对象（user的属性虽然变化了，但是user在内存中的地址依然没变），故不会触发ngOnChanges；</li>
<li>当修改message时，①不处罚。原因：ngOnChanges钩子只针对输入属性，message为非输入属性；</li>
</ul>
<p>虽然修改可变对象不会触发ngOnChanges钩子，但是子组件上的值已然发生了变化。这是由于Angular的变更检测机制仍然不活了组件中每个对象的属性的变化。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;钩子的调用顺序：&quot;&gt;&lt;a href=&quot;#钩子的调用顺序：&quot; class=&quot;headerlink&quot; title=&quot;钩子的调用顺序：&quot;&gt;&lt;/a&gt;钩子的调用顺序：&lt;/h3&gt;&lt;p&gt;consttructor -&amp;gt; ngOnChanges -&amp;gt;  ngOnInit
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Angular 2（六）： 输入属性、输出属性</title>
    <link href="https://github.com/tuluffy/2017/07/25/output/"/>
    <id>https://github.com/tuluffy/2017/07/25/output/</id>
    <published>2017-07-25T06:31:28.000Z</published>
    <updated>2017-07-25T06:31:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="输入属性"><a href="#输入属性" class="headerlink" title="输入属性"></a>输入属性</h3><h4 id="父组件单向向子组件中传值"><a href="#父组件单向向子组件中传值" class="headerlink" title="父组件单向向子组件中传值"></a>父组件单向向子组件中传值</h4><ul>
<li><p>父组件：</p>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;我是父组件&lt;/div&gt;</div><div class="line">&lt;app-child [myVal]=&quot;val&quot;&gt;&lt;/app-child&gt;</div></pre></td></tr></table></figure>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">val: string = &apos;这是在父组件的控制器中赋值！&apos;;</div></pre></td></tr></table></figure>
</li>
<li><p>子组件</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;&#123;&#123;myVal&#125;&#125;&lt;/div&gt;</div></pre></td></tr></table></figure>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//在子组件中将“myVal”声明为输入属性</div><div class="line">//至此，父组件中的值就能直接传递给&quot;myVal&quot;了</div><div class="line">@Input() myVal;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="输出属性"><a href="#输出属性" class="headerlink" title="输出属性"></a>输出属性</h3><h4 id="数据从子组件中发射，在父组件中捕获"><a href="#数据从子组件中发射，在父组件中捕获" class="headerlink" title="数据从子组件中发射，在父组件中捕获"></a>数据从子组件中发射，在父组件中捕获</h4><ul>
<li><p>子组件：对外发射数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">① @Output()   </div><div class="line">② outObjName: EventEmitter&lt;Product&gt; = new EventEmitter();</div><div class="line"></div><div class="line">constructor()&#123;</div><div class="line">③    let prod: Product = new Product(&quot;joy&quot;,13);</div><div class="line">④    this.outObjName.emit(prod);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>①②表示声明一个输出属性（也可以说成输出对象），该属性具有发射数据的能力；</li>
<li>②中，需要为声明的属性指明一个泛型，EventEmitter&lt;泛型&gt;。该泛型即是：对外发射的数据的类型；</li>
<li>③生成一个符合规则的数据；</li>
<li>④使用输出属性将数据发射出去（发射到父组件中）；</li>
</ul>
</li>
</ul>
<ul>
<li>父组件：接收来自于子组件的数据 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;我是父组件&lt;/div&gt;</div><div class="line">④ &lt;app-child (outObjName)=&quot;getDataFromChild($event)&quot;&gt;&lt;/app-child&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">① prodInParent : Product = new Product();</div><div class="line"></div><div class="line">② getDataFromChild(ev:Product)&#123;</div><div class="line">③    this.prodInParent = ev;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>   在Angular中，捕获子组件中发射的事件，和捕获原生的DOM事件是一样的操作。</p>
<ul>
<li>①中新建了了一个Product的实例，为接收数据做准备；</li>
<li>②自定义函数，捕获从子组件中发射出来的指定类型的数据；</li>
<li>③使用捕获到的数据</li>
<li>④对子组件中发射事件进行监听，一旦捕获到，立即响应指定的操作（getDataFromChild）</li>
</ul>
<h3 id="补充说明："><a href="#补充说明：" class="headerlink" title="补充说明："></a>补充说明：</h3><ul>
<li>一般情况下，父组件中“捕获的事件名称”和子组件中“输出属性的名称”保持一致；</li>
<li>如果需要给输出属性指定别名，可以：@Output(‘otherName’)。这时，在父组件中④的位置outObjName需要与otherName相同；</li>
</ul>
<h3 id="中间人模式："><a href="#中间人模式：" class="headerlink" title="中间人模式："></a>中间人模式：</h3><ul>
<li>简单来说，使用一个公共的父组件来连通两个不相关的组件，使之间的数据和事件响应在一定程度上得到关联；</li>
<li>使用中间人模式既实现既定功能，也实现了组件之间的解耦；   </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;输入属性&quot;&gt;&lt;a href=&quot;#输入属性&quot; class=&quot;headerlink&quot; title=&quot;输入属性&quot;&gt;&lt;/a&gt;输入属性&lt;/h3&gt;&lt;h4 id=&quot;父组件单向向子组件中传值&quot;&gt;&lt;a href=&quot;#父组件单向向子组件中传值&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Angular 2（五）： 注入器、数据绑定、管道</title>
    <link href="https://github.com/tuluffy/2017/07/24/databind/"/>
    <id>https://github.com/tuluffy/2017/07/24/databind/</id>
    <published>2017-07-24T09:23:46.000Z</published>
    <updated>2017-07-24T09:23:46.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="注入器"><a href="#注入器" class="headerlink" title="注入器"></a>注入器</h3><h4 id="1-注入器及其层级关系"><a href="#1-注入器及其层级关系" class="headerlink" title="1.注入器及其层级关系"></a>1.注入器及其层级关系</h4><ul>
<li><p>第一步：Angular在应用启动时，会生成一个应用级的注入器，将主模块和引用模块中的提供器（provide）全部注入到其中；</p>
<ul>
<li>NgModule中的providers内声明的提供器</li>
<li>imports中的模块（BrowserModule、HttpModule）依赖的提供器</li>
</ul>
</li>
<li><p>第二步：Angular创建启动模块指定的主组件（AppComponent），同时应用级的注入器会为主组件创建一个组件级的注入器。</p>
<p>并将主组件中声明的提供器注入到组件级的注入其中；</p>
</li>
<li><p>第三步：在主组件中的子组件被创建时，主组件的注入器会为被激活的子组件创建一个组件级的注入器；</p>
<p>  并将子组件中的提供器注入其中；</p>
<h4 id="以此类推，最终形成一套注入器层级关系。"><a href="#以此类推，最终形成一套注入器层级关系。" class="headerlink" title="以此类推，最终形成一套注入器层级关系。"></a>以此类推，最终形成一套注入器层级关系。</h4><h4 id="2-注入器的使用"><a href="#2-注入器的使用" class="headerlink" title="2.注入器的使用"></a>2.注入器的使用</h4></li>
<li><p>Angular只提供在构造函数中注入的方式来创建服务；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">constructor(private service:Service)&#123;</div><div class="line">    //this.service.methodName();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>除了常用的在构造函数的参数直接声明服务以外，还可以手动调用注入器获取需要的服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">constructor(private injector:Injector)&#123;</div><div class="line">    this.service = injector.get(&quot;Service&quot;);</div><div class="line">    this.service.methodName();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><h4 id="Angular才用的是DOM属性绑定的模式来完成数据绑定。"><a href="#Angular才用的是DOM属性绑定的模式来完成数据绑定。" class="headerlink" title="Angular才用的是DOM属性绑定的模式来完成数据绑定。"></a>Angular才用的是DOM属性绑定的模式来完成数据绑定。</h4><h4 id="1-DOM属性绑定流程"><a href="#1-DOM属性绑定流程" class="headerlink" title="1.DOM属性绑定流程"></a>1.DOM属性绑定流程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;text&quot; value=&apos;1&apos; (input)=&quot;console($event)&quot;/&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">console(ev):any&#123;</div><div class="line">    ① console.log(ev.target.value);</div><div class="line">    ② console.log(ev.target.getAttribute(&apos;value&apos;));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在input事件发生的时候，在控制台中可以看到①打印的值与文本框保持一致，而②始终是默认的value值；</p>
<p>这是因为HTML属性指向的是初始值，而DOM属性指向的是当前值，且HTML属性不可变；</p>
<ul>
<li>DOM属性发生变化时的流程<ol>
<li>（组件）input中的值发生变化</li>
<li>DOM属性发生变化，HTML属性不变</li>
<li>浏览器保持DOM属性和UI同步</li>
<li>value渲染到页面</li>
</ol>
</li>
</ul>
<h4 id="2-HTML属性绑定流程"><a href="#2-HTML属性绑定流程" class="headerlink" title="2.HTML属性绑定流程"></a>2.HTML属性绑定流程</h4><ul>
<li>HTML属性发生变化时的流程                   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">① &lt;div [colspan]=&quot;&#123;&#123;1+1&#125;&#125;&quot;&gt;&lt;/div&gt;</div><div class="line">② &lt;div [attr.colspan]=&quot;val&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>由于Angular使用的是DOM属性绑定，而DOM属性中没有colspan，故①中的写法会报错；</p>
<ul>
<li><p>DOM属性发生变化时的流程 </p>
<ol>
<li>(控制器)数据发生变化</li>
<li>更新HTML元素，不更新DOM元素</li>
<li>（浏览器同步HTML元素和DOM对象）DOM节点发生变化，造成DOM对象的属性发生变化</li>
<li>浏览器同步DOM属性和UI</li>
<li>渲染页面</li>
</ol>
</li>
</ul>
<hr>
<h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>cli命令创建管道：ng g pipe pipeName</p>
<h4 id="1-管道的标准形式"><a href="#1-管道的标准形式" class="headerlink" title="1.管道的标准形式"></a>1.管道的标准形式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import &#123; Pipe,PipeTransform &#125; from &apos;@angular/core&apos;;</div><div class="line"></div><div class="line">@Pipe(&#123; name: &quot;timeFilter&quot; &#125;)</div><div class="line"></div><div class="line">export class TimeFilter implements PipeTransform&#123;</div><div class="line">    transform(value:any,argu:any):any&#123;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-管道-是数据扩大指定的倍数"><a href="#2-管道-是数据扩大指定的倍数" class="headerlink" title="2.管道:是数据扩大指定的倍数"></a>2.管道:是数据扩大指定的倍数</h4><ul>
<li><p>extraMultiple.ts</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">transform(value:number,multiple?:number):number&#123;</div><div class="line">      if(!multiple)&#123; multiple = 1; &#125;</div><div class="line">      return  value * multiple;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>app.component.html</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;&#123;&#123; val | extraMultiple: &apos;3&apos; &#125;&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>如果有多个过滤参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;&#123;&#123; val | pipeName: &apos;argu1&apos; : &apos;agru2&apos; &#125;&#125;&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h3><ul>
<li>少量HTML属性和DOM属性有一一对应的关系，如“id”；</li>
<li>有些HTML属性没有对应的DOM属性，如“colspan”；</li>
<li>有些DOM属性没有对应的HTML属性，如“textContent”；</li>
<li>就算属性名字相同，DOM属性和HTML属性不是一样的东西；    </li>
<li>HTML属性指定初始值（不可变），DOM属性指向当前值（可变）；</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;注入器&quot;&gt;&lt;a href=&quot;#注入器&quot; class=&quot;headerlink&quot; title=&quot;注入器&quot;&gt;&lt;/a&gt;注入器&lt;/h3&gt;&lt;h4 id=&quot;1-注入器及其层级关系&quot;&gt;&lt;a href=&quot;#1-注入器及其层级关系&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Angular 2（四）： 依赖注入和控制反转</title>
    <link href="https://github.com/tuluffy/2017/07/24/diIoc/"/>
    <id>https://github.com/tuluffy/2017/07/24/diIoc/</id>
    <published>2017-07-24T03:20:43.000Z</published>
    <updated>2017-07-24T03:20:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><h4 id="依赖注入和控制反转"><a href="#依赖注入和控制反转" class="headerlink" title="依赖注入和控制反转"></a>依赖注入和控制反转</h4><ul>
<li>A依赖于B，A不需要在代码内部直接创建B的实例对象，而是由外部提供（B的实例对象）； </li>
<li>将依赖的控制权从代码的内部转移到代码的外部；</li>
</ul>
<p>依赖注入和控制反转是一体两面，依赖注入是目的，控制反转是手段，终究实现代码的松耦合。</p>
<h4 id="token"><a href="#token" class="headerlink" title="token"></a>token</h4><ul>
<li>示例代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@NgModule(&#123;</div><div class="line">    ①providers: [ ProdService ]</div><div class="line">    </div><div class="line">    ②providers: [&#123;</div><div class="line">        provide: ProdService,</div><div class="line">        useClass: ProdService,</div><div class="line">    &#125;]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>token在Angular中代表一个被注入的对象的类型，由provide决定；</li>
<li>如：示例代码中，注册的Token的类型为ProdService；</li>
<li>当有组件或者指令声明（在其构造函数中）需要一个类型为ProdService的token时，注入器就会实例化一个ProdService对象（由useClass决定实例化哪个），并将其注入到组件中；</li>
<li>在组件中，通过构造函数获得该对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">constructor(private prodService:ProdService)&#123;</div><div class="line">    //prodService</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="服务的三种使用形式：useClass、useFactory、useValue"><a href="#服务的三种使用形式：useClass、useFactory、useValue" class="headerlink" title="服务的三种使用形式：useClass、useFactory、useValue"></a>服务的三种使用形式：useClass、useFactory、useValue</h3><h4 id="Injectable-，表示可以在该类中注入其他服务，建议所有的服务都加上该声明；"><a href="#Injectable-，表示可以在该类中注入其他服务，建议所有的服务都加上该声明；" class="headerlink" title="@Injectable()，表示可以在该类中注入其他服务，建议所有的服务都加上该声明；"></a>@Injectable()，表示可以在该类中注入其他服务，建议所有的服务都加上该声明；</h4><h4 id="useClass"><a href="#useClass" class="headerlink" title="useClass"></a>useClass</h4><ul>
<li>服务建议放在模块（即：app.module.ts的providers中）中，使之成为全局共享；</li>
<li>如果将服务放在组件中，那么它只能在局部使用（组件及其子组件）。对于同名的token请求，组件中的服务类将覆盖模块中的服务类；</li>
</ul>
<p>1.productService.ts</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@Injectable()</div><div class="line">export class ProductService&#123;</div><div class="line">    //do something</div><div class="line">    getProduct():Product&#123;</div><div class="line">        return new Product(...)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.anthorProductService.ts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@Injectable()</div><div class="line">export class AnthorProductService implements ProductService&#123;</div><div class="line">    //do something</div><div class="line">    getProduct():Product&#123;</div><div class="line">        return new Product(...);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3.app.module.ts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@NgModule(&#123;</div><div class="line">    providers:[ ProductService ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>4.product.component.html</p>
<p>使用在模块中声明的服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Component(&#123;</div><div class="line">    ...,</div><div class="line">&#125;)</div><div class="line">export class ProductComponent implements OnInit&#123;</div><div class="line">    constructor(private ps:ProductService)&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用在组件中的服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@Component(&#123;</div><div class="line">           ...,</div><div class="line">           providers:[</div><div class="line">               &#123;</div><div class="line">                   provide:ProductService,</div><div class="line">                   useClass:AnthorProductService</div><div class="line">               &#125;</div><div class="line">           ]</div><div class="line">       &#125;)</div><div class="line">       export class ProductComponent implements OnInit&#123;</div><div class="line">           //声明使用ProductService类型的token，会使用AnthorProductService类创建实例</div><div class="line">           constructor(private ps:ProductService)&#123;&#125;</div><div class="line">       &#125;</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="提供器之-useFactory"><a href="#提供器之-useFactory" class="headerlink" title="提供器之 useFactory"></a>提供器之 useFactory</h3><p>在提供服务时，可能要根据不同的状态去初始化不同的服务实例，这时需要使用useFactory提供器来完成。</p>
<p>通过随机数模拟开发/生产状态来实例化不同的服务类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">providers:[</div><div class="line">    &#123;</div><div class="line">        provide: ProductService,</div><div class="line">        useFactory:()=&gt;&#123;</div><div class="line">            ① let log = new LogService();</div><div class="line">            let dev = Math.random() &gt; 0.5;</div><div class="line">            </div><div class="line">            if(dev)&#123;</div><div class="line">                return new ProductService(log);</div><div class="line">            &#125;</div><div class="line">            else &#123;</div><div class="line">                return new AnthorProductService(log);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;，</div><div class="line">   LogService </div><div class="line">],</div></pre></td></tr></table></figure></p>
<ul>
<li>以上，我们就完成了模拟开发/生产环境来提供不同的服务实例，而在组件内部使用的时候根本不知道我们提供的是什么。这也就实现了服务和组件的初步解耦。</li>
<li>同时，如果你细心一点，在使用的过程中会发现整个应用内部ProductService类型的token对应的服务实例是同一个。由此可以说：工厂方法创建的对象是单例对象，在该对象被初次创建之后，整个应用内部都是使用同一个。</li>
<li>但是，轻而易举地发现在useFactory的方法内部出现了①这样的写法，LogService和ProductService强耦合。我们需要解决这个问题，使用提供器的第三个参数配置deps(数组)：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    provide: ProductService,</div><div class="line">    useFactory:(log:LogService)=&gt;&#123;</div><div class="line">        let dev = Math.random() &gt; 0.5;</div><div class="line">                        </div><div class="line">        if(dev)&#123;</div><div class="line">            return new ProductService(log);</div><div class="line">        &#125;</div><div class="line">        else &#123;</div><div class="line">            return new AnthorProductService(log);</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    deps:[ LogService ]</div><div class="line">&#125;，</div><div class="line">LogService</div></pre></td></tr></table></figure>
<ul>
<li>上面代码实现了服务（ProductService）和服务（LogService）之间的解耦。ProductService将使用外部的LogService来注入工厂方法内部，从而创建实例。</li>
</ul>
<hr>
<h3 id="提供器之-useValue"><a href="#提供器之-useValue" class="headerlink" title="提供器之 useValue"></a>提供器之 useValue</h3><p>该提供器方法常常结合useFactory使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">providers:[</div><div class="line">    &#123;</div><div class="line">        provide...,</div><div class="line">        useFactory:(log:LogService,isDev)=&gt;&#123;</div><div class="line">            //do something</div><div class="line">        &#125;,</div><div class="line">        deps:[ LogService,&quot;IS_DEV&quot; ]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        provide:&quot;IS_DEV&quot;,</div><div class="line">        useValue:false</div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure></p>
<ul>
<li>useValue的值也可以使用对象:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    provide:&quot;APP_CONFIG&quot;,</div><div class="line">    useValue:&#123; isDev:false &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h4 id="Angular在启动的时候，在创建服务的过程中会对每一个服务的依赖进行实例化并注入到当前服务中，如此一层一层递进直至结束。于是"><a href="#Angular在启动的时候，在创建服务的过程中会对每一个服务的依赖进行实例化并注入到当前服务中，如此一层一层递进直至结束。于是" class="headerlink" title="Angular在启动的时候，在创建服务的过程中会对每一个服务的依赖进行实例化并注入到当前服务中，如此一层一层递进直至结束。于是"></a>Angular在启动的时候，在创建服务的过程中会对每一个服务的依赖进行实例化并注入到当前服务中，如此一层一层递进直至结束。于是</h4><ul>
<li>每一个服务都是独立的，服务与服务之间不存在耦合。</li>
<li>每一个组件在申请使用服务的时候，并不知道服务是如何构建的，组件与服务之间不存在耦合。</li>
</ul>
<p>以上两点就是Angular实现“依赖注入”和“控制反转”的核心。   </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基础概念&quot;&gt;&lt;a href=&quot;#基础概念&quot; class=&quot;headerlink&quot; title=&quot;基础概念&quot;&gt;&lt;/a&gt;基础概念&lt;/h3&gt;&lt;h4 id=&quot;依赖注入和控制反转&quot;&gt;&lt;a href=&quot;#依赖注入和控制反转&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Angular 2（三）： 子路由和守卫</title>
    <link href="https://github.com/tuluffy/2017/07/20/childRouter/"/>
    <id>https://github.com/tuluffy/2017/07/20/childRouter/</id>
    <published>2017-07-20T02:33:12.000Z</published>
    <updated>2017-07-20T02:33:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="子路由"><a href="#子路由" class="headerlink" title="子路由"></a>子路由</h2><p>  子路由相对于根路由的概念而来，示例：children：数组，配置路由相关信息</p>
<p>  路由配置：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    path:&apos;product&apos;,</div><div class="line">    component:ProductComponent,</div><div class="line">    children:[  //关键字</div><div class="line">        &#123;</div><div class="line">            path:&apos;&apos;,</div><div class="line">            component:ProductDescComponent  //商品简介组件</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            path:&apos;seller/:id&apos;,</div><div class="line">            component:SellerDetailComponent     //具体商品信息组件</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  父组件：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">注意[routerLink] = &quot;[&apos;./&apos;]&quot;，路径中加&quot;.&quot;指明是匹配子路由</div><div class="line">  &lt;a [routerLink] = &quot;[&apos;./&apos;]&quot;&gt;商品简介&lt;/a&gt;</div><div class="line">  &lt;a [routerLink] = &quot;[&apos;./seller/3&apos;]&quot;&gt;商品信息&lt;/a&gt;</div><div class="line">  &lt;router-outlet&gt;&lt;/router-outlet&gt;     //供子组件使用的路由插座</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="辅助路由"><a href="#辅助路由" class="headerlink" title="辅助路由"></a>辅助路由</h2><p> 概览：辅助路由可以有多个，根据“name”字段来匹配</p>
<ul>
<li>路由配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    path:&apos;xxx&apos;,</div><div class="line">    component:XComponent,</div><div class="line">    outlet:&quot;aux&quot;,   //匹配路由名字,确定放在哪个辅助路由上</div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line">    path:&apos;yyy&apos;,</div><div class="line">    component:YComponent,</div><div class="line">    outlet:&quot;aux&quot;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>父组件写法，假设是在app.component.html中<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;a [routerLink]=&quot;[&apos;/home&apos;,&#123; outlets:&#123; aux:&quot;xxx&quot; &#125; &#125;]&quot;&gt;GOTO XXX&lt;/a&gt;</div><div class="line">&lt;a [routerLink]=&quot;[&apos;/home&apos;,&#123; outlets:&#123; aux:&quot;yyy&quot; &#125; &#125;]&quot;&gt;GOTO YYY&lt;/a&gt;</div><div class="line"></div><div class="line">&lt;router-outlet&gt;&lt;/router-outlet&gt;     //主路由</div><div class="line">&lt;router-outlet name=&quot;aux&quot;&gt;&lt;/router-outlet&gt;      //辅助路由</div><div class="line">&lt;router-outlet name=&quot;other&quot;&gt;&lt;/router-outlet&gt;      //可以有多个辅助路由</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h2><h3 id="路由守卫的意义在于，路由事件发生后，是否允许默认操作（比如，跳转到指定的页面）"><a href="#路由守卫的意义在于，路由事件发生后，是否允许默认操作（比如，跳转到指定的页面）" class="headerlink" title="路由守卫的意义在于，路由事件发生后，是否允许默认操作（比如，跳转到指定的页面）"></a>路由守卫的意义在于，路由事件发生后，是否允许默认操作（比如，跳转到指定的页面）</h3><p>如何使用？示例：</p>
<ul>
<li><p>路由文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">import LoginGuard from &quot;...&quot;;</div><div class="line">import TokenGuard from &quot;...&quot;;</div><div class="line"></div><div class="line">const routes : Routes = [</div><div class="line">    &#123;</div><div class="line">        path:&apos;product&apos;,</div><div class="line">        component:ProductComponent,</div><div class="line">        //路由钩子对象（对应loginGuard.ts中的钩子接口）</div><div class="line">        canActivate:[   //是否可以进入该组件</div><div class="line">            LoginGuard  //控制函数（路由钩子函数），只有当所有的函数都返回true时，才可以进入组件</div><div class="line">            TokenGuard</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">];</div><div class="line"></div><div class="line">@NgModule(&#123;</div><div class="line">    import:[RouterModule.forRoot(routes)],</div><div class="line">    exports:[RouterModule],</div><div class="line">    providers:[ LoginGuard,TokenGuard ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>守卫文件：loginGuard.ts</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">export class LoginGuard implements CanActivate&#123;</div><div class="line">    CanActivate():boolean&#123;  //接收一个boolean类型的返回值</div><div class="line">        //处理逻辑，比如判断token是否有效</div><div class="line">        //return true;  </div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>增加一个CanDeactivate守卫，表示是否可以离开该组件(常用来检查用户填写的信息是否已经保存):</p>
<p>   实现守卫（实现CanDeactivate守卫接口）接口，unSaveGuard.ts文件中<br>    注意事项：</p>
<ul>
<li>该守卫需要接受一个组件作为参数（即保护的组件）；</li>
<li>在守卫函数中，需要创建组件的对象（comp），通过该对象获得组件内部的属性判断是否已经保存</li>
</ul>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">import &#123; CanDeactivate &#125; from &apos;...&apos;;</div><div class="line"></div><div class="line">export class UnSaveGuard implements CanDeactivate&lt;ProductComponent&gt;&#123;</div><div class="line">   canDeactivate(comp:ProductComponent)&#123;</div><div class="line">       //逻辑操作，对组件内部的变量进行验证是否已经保存</div><div class="line">       comp.varibleName;    </div><div class="line">       </div><div class="line">       //return true;  //是否允许离开</div><div class="line">       return false;</div><div class="line"></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>将守卫加入到路由配置中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    path: &apos;product&apos;,</div><div class="line">    component: ProductComponent,</div><div class="line">    canActivate:[ LoginGuard,TokenGuard ],</div><div class="line">    canDeactivate:[ UnSaveGuard ] //只有一系列函数都return true才可以顺利执行路由操作</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在NgModule中配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">providers: [ loginGuard,TokenGuard,UnSaveGuard ]</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="resolve守卫"><a href="#resolve守卫" class="headerlink" title="resolve守卫"></a>resolve守卫</h2><p>该守卫常用在进入下一个组件之前，执行服务获取下一个组件需要用到的数据，并带入组件中。<br>所以该组件需要可以被注入，在写时需要加入@Injectable()标识</p>
<ul>
<li><p>路由配置项改写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    path:&apos;product&apos;,</div><div class="line">    component:ProductComponent,</div><div class="line">    resolve:&#123;</div><div class="line">        prod: ProductResolve //prod是传入组件中的参数集合的对象</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>写productResolve.ts文件，提供ProductResolve函数</p>
</li>
<li><p>该class需要指定返回的参数的格式，即：<product></product></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">export class ProductResolve implements Resolve&lt;Product&gt;&#123;</div><div class="line">    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable&lt;Product&gt;|Promise&lt;Product&gt;|Product &#123;</div><div class="line">        //发起请求，获取数据</div><div class="line">        return data;    //将解析好的数据传递到组件内部,之后订阅该字段获取数据</div><div class="line">      &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在组建中取值（采用订阅的方式）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">constructor(private routeInfo:ActivatedRoute)&#123;&#125;</div><div class="line"></div><div class="line">ngOnInit()&#123;</div><div class="line">    this.routeInfo.data.subscribe((data:&#123;prod:Product&#125;) =&gt; &#123;</div><div class="line">        this.id = data.prod.id;     </div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="本章内容主要通过代码展示，比较粗略。如果发现文档中的错漏，或者涉及到具体问题，可以联系QQ-3265564490-备注：Angular-笔记"><a href="#本章内容主要通过代码展示，比较粗略。如果发现文档中的错漏，或者涉及到具体问题，可以联系QQ-3265564490-备注：Angular-笔记" class="headerlink" title="本章内容主要通过代码展示，比较粗略。如果发现文档中的错漏，或者涉及到具体问题，可以联系QQ:3265564490,备注：Angular 笔记"></a>本章内容主要通过代码展示，比较粗略。如果发现文档中的错漏，或者涉及到具体问题，可以联系QQ:3265564490,备注：Angular 笔记</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;子路由&quot;&gt;&lt;a href=&quot;#子路由&quot; class=&quot;headerlink&quot; title=&quot;子路由&quot;&gt;&lt;/a&gt;子路由&lt;/h2&gt;&lt;p&gt;  子路由相对于根路由的概念而来，示例：children：数组，配置路由相关信息&lt;/p&gt;
&lt;p&gt;  路由配置：&lt;br&gt;  &lt;figu
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Angular 2（二）： 路由</title>
    <link href="https://github.com/tuluffy/2017/07/11/router/"/>
    <id>https://github.com/tuluffy/2017/07/11/router/</id>
    <published>2017-07-11T10:30:07.000Z</published>
    <updated>2017-07-11T10:30:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h4 id="router是Angular-内置模块，可以使用cli-提供的指令来创建包含route-组件的项目"><a href="#router是Angular-内置模块，可以使用cli-提供的指令来创建包含route-组件的项目" class="headerlink" title="router是Angular 内置模块，可以使用cli 提供的指令来创建包含route 组件的项目"></a>router是Angular 内置模块，可以使用cli 提供的指令来创建包含route 组件的项目</h4>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ng new router --routing</div></pre></td></tr></table></figure>
<p> 此时，在app.module.ts 文件中可以看到已经被自动引入到 imports组中。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">imports: [</div><div class="line">    BrowserModule,</div><div class="line">    AppRoutingModule</div><div class="line">  ],</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="路由组件相关字段含义"><a href="#路由组件相关字段含义" class="headerlink" title="路由组件相关字段含义"></a>路由组件相关字段含义</h2><h3 id="1-Routes，路由的配置项"><a href="#1-Routes，路由的配置项" class="headerlink" title="1. Routes，路由的配置项"></a>1. Routes，路由的配置项</h3><ul>
<li>保存路由信息，即：url和component的对应关系</li>
<li>指定组件展示在哪个路有插座上(&lt;RouterOutLet&gt;&lt;/RouterOutLet&gt;)</li>
</ul>
<h3 id="2-RouterOutLet，路由插座，即：激活的组件显示在Html-代码片段中的位置"><a href="#2-RouterOutLet，路由插座，即：激活的组件显示在Html-代码片段中的位置" class="headerlink" title="2. RouterOutLet，路由插座，即：激活的组件显示在Html 代码片段中的位置"></a>2. RouterOutLet，路由插座，即：激活的组件显示在Html 代码片段中的位置</h3><h3 id="3-Router，路由对象，提供在控制器中使用的一系列方法"><a href="#3-Router，路由对象，提供在控制器中使用的一系列方法" class="headerlink" title="3. Router，路由对象，提供在控制器中使用的一系列方法"></a>3. Router，路由对象，提供在控制器中使用的一系列方法</h3><ul>
<li>navigate()</li>
<li>navigateByUrl()</li>
</ul>
<h3 id="4-RouterLink，在Html-中使用的导航指令"><a href="#4-RouterLink，在Html-中使用的导航指令" class="headerlink" title="4. RouterLink，在Html 中使用的导航指令"></a>4. RouterLink，在Html 中使用的导航指令</h3><h3 id="5-ActivatedRoute，当前激活的组件的路由对象"><a href="#5-ActivatedRoute，当前激活的组件的路由对象" class="headerlink" title="5. ActivatedRoute，当前激活的组件的路由对象"></a>5. ActivatedRoute，当前激活的组件的路由对象</h3><ul>
<li>路由地址</li>
<li>路由参数</li>
</ul>
<hr>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="1-配置项中，path-对象的值不能使用”-“-开头，这样可以使在项目中自由使用绝对路径和相对路径"><a href="#1-配置项中，path-对象的值不能使用”-“-开头，这样可以使在项目中自由使用绝对路径和相对路径" class="headerlink" title="1. 配置项中，path 对象的值不能使用”/“ 开头，这样可以使在项目中自由使用绝对路径和相对路径"></a>1. 配置项中，path 对象的值不能使用”/“ 开头，这样可以使在项目中自由使用绝对路径和相对路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const router:Router = [</div><div class="line">    &#123;</div><div class="line">        path:&quot;product&quot;,    //path:&quot;/product&quot;,错误写法</div><div class="line">        component:ProductComponet</div><div class="line">    &#125;</div><div class="line">];</div></pre></td></tr></table></figure>
<hr>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="1-RouterLink"><a href="#1-RouterLink" class="headerlink" title="1. RouterLink"></a>1. RouterLink</h3>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a [RouterLink]=&quot;[&apos;/product&apos;]&quot;&gt;GOTO&lt;/a&gt;</div></pre></td></tr></table></figure>
<ul>
<li>路由地址以’/‘ 开头，表示查找的是根目录组件</li>
<li>值的形式是数组，由路由地址和参数组成：[‘url’,参数]</li>
</ul>
<p>该写法等价于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a (click)=&quot;GOTO()&quot;&gt;GOTO&lt;/a&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Controller:</div><div class="line">constructor(private router:Router)&#123;&#125;</div><div class="line">    </div><div class="line">GOTO():void&#123;</div><div class="line">    this.router.navigate([&apos;/product&apos;])</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-基础写法"><a href="#2-基础写法" class="headerlink" title="2. 基础写法"></a>2. 基础写法</h3><ul>
<li>路由匹配是采取优先原则，通配符配置放在最后面，当路径错误是展现指定的页面<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const router : Router =[</div><div class="line">    &#123; path:&quot;&quot;,component:HomeComponent &#125;</div><div class="line">    &#123; path:&quot;product&quot;,component:Product &#125;</div><div class="line">    &#123; path:&quot;**&quot;,component:404Component &#125;    //通配符配置</div><div class="line">]</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-参数的传递和接收"><a href="#3-参数的传递和接收" class="headerlink" title="3. 参数的传递和接收"></a>3. 参数的传递和接收</h3><p>路由参数传递的方式有三种，分别是：</p>
<p>   ① 在查询参数中传递<br>   ② 在路径中传递<br>   ③ 在配置项中使用特定对象data传递</p>
<ul>
<li><p><strong>在查询参数中传递</strong><br>传递方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a [routerLink]=&quot;[&apos;/product&apos;]&quot; [queryParams]=&quot;&#123;id:1&#125;&quot;&gt;GOTO&lt;/a&gt;</div></pre></td></tr></table></figure>
<p>接收方式:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">constructor(private routeInfo : ActivatedRoute)&#123;&#125;</div><div class="line"></div><div class="line">private id : number;</div><div class="line"></div><div class="line">ngOnInit()&#123;</div><div class="line">    this.id = this.routeInfo.snapshot.queryParams[&quot;id&quot;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>在路径中设置参数</strong><br>修改router中的配置:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; path:&quot;product/:id&quot;, component:ProductComponent &#125;</div></pre></td></tr></table></figure>
<p>修改Html中的RouterLink的写法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a [routerLink] = &quot;[&apos;/product&apos;, 1]&quot;&gt;GOTO&lt;/a&gt;</div></pre></td></tr></table></figure>
<p>Controller:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">this.id = this.routeInfo.snapshot.params[&quot;id&quot;];</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><strong>在路由的配置项中使用data对象</strong><br>修改路由配置项：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">     path:&quot;product&quot;,</div><div class="line">     component:ProductComponent,</div><div class="line">     data:[</div><div class="line">         &#123;id:1&#125;,</div><div class="line">         &#123;name:2&#125;,</div><div class="line">     ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>   获取传进来的参数：<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">constructor(private routeInfo: ActivatedRoute )&#123;&#125;</div><div class="line"></div><div class="line">ngOnInit()&#123;</div><div class="line">    this.id = this.routeInfo.data[0][&quot;id&quot;];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="参数快照和参数订阅"><a href="#参数快照和参数订阅" class="headerlink" title="参数快照和参数订阅"></a>参数快照和参数订阅</h2><p>通过路由激活某一个组件之后，获取参数的方式有两种</p>
<ul>
<li><p>参数快照，关键字：snapshot</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ngOnInit()&#123;</div><div class="line">     this.id = this.routeInfo.snapshot.params[&quot;id&quot;];</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>参数订阅，关键字：subscribe</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ngOnInit()&#123;</div><div class="line">     this.routeInfo.params.subscribe((params : Params) =&gt; &#123;</div><div class="line">        this.id = params[&quot;id&quot;];</div><div class="line">     &#125;)</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>参数订阅与参数快照的使用场景：</strong><br><em>当由HomeComponent进入到ProductComponent时，ProductComponent被激活，ngOnInit和constructor调用一次。<br>  例如：Product组件内部产品间的切换，由于id是通过参数在ngOnInit中获取的：<br>  ①如果使用snapshot的方式，组件未被销毁，noOnInit不再执行，那么显示在外部的id值将不再更新，出现数据错误；<br>  ②处理方式，采用subscribe的方式，当参数发生变化，即可更新信息；
  </em></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;h4 id=&quot;router是Angular-内置模块，可以使用cli-提供的指令来创建包含route-组件的项目&quot;&gt;&lt;a href=&quot;#rout
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Angular 2（一）： 概览</title>
    <link href="https://github.com/tuluffy/2017/07/10/synopsis/"/>
    <id>https://github.com/tuluffy/2017/07/10/synopsis/</id>
    <published>2017-07-10T10:27:50.000Z</published>
    <updated>2017-07-10T10:27:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h2><h4 id="1-全新的命令行工具-angular-cli"><a href="#1-全新的命令行工具-angular-cli" class="headerlink" title="1. 全新的命令行工具 angular-cli"></a>1. 全新的命令行工具 <a href="https://www.npmjs.com/package/angular-cli" target="_blank" rel="external">angular-cli</a></h4><h4 id="2-服务端渲染"><a href="#2-服务端渲染" class="headerlink" title="2. 服务端渲染"></a>2. 服务端渲染</h4><ul>
<li>缩短页面从启动到完整展现的时间</li>
<li>解决seo问题</li>
</ul>
<h4 id="3-提供了标准的UI库（Material-Design），使桌面和移动程序兼容"><a href="#3-提供了标准的UI库（Material-Design），使桌面和移动程序兼容" class="headerlink" title="3. 提供了标准的UI库（Material Design），使桌面和移动程序兼容"></a>3. 提供了标准的UI库（Material Design），使桌面和移动程序兼容</h4><h4 id="4-核心：组件、服务、指令-gt-功能-模块-gt-打包"><a href="#4-核心：组件、服务、指令-gt-功能-模块-gt-打包" class="headerlink" title="4. 核心：组件、服务、指令 =&gt;功能,   模块=&gt;打包"></a>4. 核心：组件、服务、指令 =&gt;功能,   模块=&gt;打包</h4><hr>
<h2 id="工程目录关键文件介绍"><a href="#工程目录关键文件介绍" class="headerlink" title="工程目录关键文件介绍"></a>工程目录关键文件介绍</h2><h3 id="1-angular-cli-json"><a href="#1-angular-cli-json" class="headerlink" title="1. .angular-cli.json"></a>1. .angular-cli.json</h3><p>angular 命令行工具配置文件，Angular应用程序启动的入口，引入第三方库需要在此处配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&quot;apps&quot;: [</div><div class="line">    &#123;</div><div class="line">      &quot;root&quot;: &quot;src&quot;,</div><div class="line">      //配置外部css文件</div><div class="line">      &quot;styles&quot;: [</div><div class="line">        &quot;styles.css&quot;,</div><div class="line">        &quot;../node_modules/bootstrap/dist/css/bootstrap.css&quot;</div><div class="line">      ],</div><div class="line">      //配置外部js文件</div><div class="line">      &quot;scripts&quot;: [</div><div class="line">        &quot;../node_modules/jquery/dist/jquery.js&quot;,    //配置JQ,注意路径问题，以root为基地址</div><div class="line">        &quot;../node_modules/bootstrap/dist/js/bootstrap.js&quot;   </div><div class="line">      ],</div><div class="line">    &#125;</div><div class="line">  ],</div></pre></td></tr></table></figure>
<hr>
<h2 id="工程模块介绍"><a href="#工程模块介绍" class="headerlink" title="工程模块介绍"></a>工程模块介绍</h2><h3 id="1-Component，-装饰器"><a href="#1-Component，-装饰器" class="headerlink" title="1. @Component， 装饰器"></a>1. @Component， 装饰器</h3><ul>
<li>用来告知框架如何处理一个ts类</li>
<li>Component中所有属性的值称为元数据</li>
<li>Angular根据元数据渲染组件，并实现控制器的逻辑</li>
</ul>
<h3 id="2-Template，模板，可以简单地理解为可使用Angular数据绑定机制的html片段"><a href="#2-Template，模板，可以简单地理解为可使用Angular数据绑定机制的html片段" class="headerlink" title="2. Template，模板，可以简单地理解为可使用Angular数据绑定机制的html片段"></a>2. Template，模板，可以简单地理解为可使用Angular数据绑定机制的html片段</h3><h3 id="3-Controller，控制器"><a href="#3-Controller，控制器" class="headerlink" title="3.Controller，控制器"></a>3.Controller，控制器</h3><ul>
<li>被@Component装饰器用来装饰</li>
<li>通过数据绑定和模板通信</li>
</ul>
<hr>
<h2 id="模块（NgModel）相关介绍"><a href="#模块（NgModel）相关介绍" class="headerlink" title="模块（NgModel）相关介绍"></a>模块（NgModel）相关介绍</h2><h3 id="1-declarations，我们定义的组件、指令、管道需要放在此处声明"><a href="#1-declarations，我们定义的组件、指令、管道需要放在此处声明" class="headerlink" title="1. declarations，我们定义的组件、指令、管道需要放在此处声明"></a>1. declarations，我们定义的组件、指令、管道需要放在此处声明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">declarations: [</div><div class="line">    AppComponent,</div><div class="line">    ProductComponent,</div><div class="line">],</div></pre></td></tr></table></figure>
<h3 id="2-imports，声明应用正常运转需要的模块，也即：AppModule所依赖的模块"><a href="#2-imports，声明应用正常运转需要的模块，也即：AppModule所依赖的模块" class="headerlink" title="2. imports，声明应用正常运转需要的模块，也即：AppModule所依赖的模块"></a>2. imports，声明应用正常运转需要的模块，也即：AppModule所依赖的模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">imports: [</div><div class="line">    BrowserModule,</div><div class="line">    HttpModule,</div><div class="line">    FormsModule,</div><div class="line">],</div></pre></td></tr></table></figure>
<h3 id="3-provides，相关服务放在此种声明"><a href="#3-provides，相关服务放在此种声明" class="headerlink" title="3. provides，相关服务放在此种声明"></a>3. provides，相关服务放在此种声明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">providers: [</div><div class="line">    HttpService，    //服务类名称</div><div class="line">],</div></pre></td></tr></table></figure>
<h3 id="4-bootstrap，声明启动组件"><a href="#4-bootstrap，声明启动组件" class="headerlink" title="4. bootstrap，声明启动组件"></a>4. bootstrap，声明启动组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">bootstrap: [</div><div class="line">    AppComponent，</div><div class="line">]</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;新特性&quot;&gt;&lt;a href=&quot;#新特性&quot; class=&quot;headerlink&quot; title=&quot;新特性&quot;&gt;&lt;/a&gt;新特性&lt;/h2&gt;&lt;h4 id=&quot;1-全新的命令行工具-angular-cli&quot;&gt;&lt;a href=&quot;#1-全新的命令行工具-angular-cli&quot; cla
    
    </summary>
    
    
  </entry>
  
</feed>
